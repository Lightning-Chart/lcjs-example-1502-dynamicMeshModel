(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const l=a(377),{lightningChart:s,PalettedFill:o,ColorRGBA:n,AxisTickStrategies:r,LUT:i,emptyFill:u,Themes:c}=l,h=s({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).Chart3D({theme:c[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0}).setBoundingBox({x:.7,y:.5,z:1}).setTitle("Real-Time Airplane Temperature");h.getDefaultAxes().forEach(e=>e.setTickStrategy(r.Numeric,e=>e.setMajorTickStyle(e=>e.setLabelFillStyle(u)).setMinorTickStyle(e=>e.setLabelFillStyle(u)))),fetch(new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"examples/assets/1502/air.obj").then(e=>e.text()).then(e=>{const t=h.addMeshModel().setScale(.0025).setModelFromObj(e).setHighlightOnHover(!1).setName("Airplane temperature"),a=new o({lookUpProperty:"value",lut:new i({units:"Â°C",interpolate:!0,steps:[{value:0,color:n(0,150,255)},{value:20,color:n(0,255,0)},{value:40,color:n(200,255,0)},{value:50,color:n(255,255,0)},{value:60,color:n(255,200,0)},{value:100,color:n(255,130,0)},{value:120,color:n(255,0,0)}]})});t.setFillStyle(a);const l=[{initValue:90,value:100,x:-.252,y:-.175,z:-.25},{initValue:90,value:100,x:.252,y:-.175,z:-.25},{initValue:110,value:100,x:-.52,y:-.145,z:-.07},{initValue:110,value:100,x:.52,y:-.145,z:-.07},{initValue:20,value:20,x:0,y:-.1,z:-1},{initValue:50,value:50,x:0,y:-.04,z:.97},{initValue:20,value:20,x:0,y:-.1,z:-.5},{initValue:20,value:20,x:0,y:-.1,z:0},{initValue:0,value:0,x:0,y:-.1,z:.5}];requestAnimationFrame(()=>{const e=[];t.setVertexValues(t=>{const a=[];for(let s=0;s<t.length;s+=1){const o=h.translateCoordinate(t[s],h.coordsWorld,h.coordsAxis),n=new Array(l.length).fill(0);let r=0;l.forEach((e,t)=>{const a=e.x-o.x,l=e.y-o.y,s=e.z-o.z,i=Math.sqrt(a**2+l**2+s**2),u=0!==i?1/i**3:1;n[t]=u,r+=u}),e.push({sumOfWeights:r,sensorWeights:n});const i=l.reduce((e,t,a)=>e+t.value*n[a],0)/r||20;a.push(i)}return a});const a=()=>{l.forEach((e,t)=>{e.value=e.initValue+10*Math.sin(window.performance.now()/500)});const s=[];t.setVertexValues(t=>{for(let a=0;a<t.length;a+=1){const{sumOfWeights:t,sensorWeights:o}=e[a],n=l.reduce((e,t,a)=>e+t.value*o[a],0)/t||20;s.push(n)}return s}),requestAnimationFrame(a)};a()})})}},e=>{e.O(0,[502],()=>e(e.s=44)),e.O()}]);